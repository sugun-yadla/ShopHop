import pytest
import requests
import responses
from unittest.mock import patch

# Import the function to test
from your_module import get_recipe_recommendations

def test_get_recipe_recommendations_successful():

    # Prepare test ingredients
    test_ingredients = ['chicken', 'tomatoes', 'pasta']
    
    # Mock the requests.post method to simulate API response
    with patch('requests.post') as mock_post:
        # Create a mock response object
        mock_response = mock_post.return_value
        mock_response.json.return_value = {
            'response': 'Delicious Chicken Pasta Recipe:\n- Ingredients: chicken, tomatoes, pasta\n- Instructions: Cook pasta, add chicken and tomatoes'
        }
        mock_response.raise_for_status.return_value = None
        
        # Call the function
        result = get_recipe_recommendations(test_ingredients)
        
        # Assertions
        assert isinstance(result, str)
        assert len(result) > 0
        assert 'chicken' in result.lower()
        assert 'tomatoes' in result.lower()
        assert 'pasta' in result.lower()

def test_get_recipe_recommendations_empty_ingredients():

    result = get_recipe_recommendations([])
    assert 'Error' in result

def test_get_recipe_recommendations_single_ingredient():
    """
    Test function with a single ingredient
    - Verifies function works with minimal input
    """
    with patch('requests.post') as mock_post:
        mock_response = mock_post.return_value
        mock_response.json.return_value = {
            'response': 'Recipes featuring chicken alone!'
        }
        mock_response.raise_for_status.return_value = None
        
        result = get_recipe_recommendations(['chicken'])
        assert isinstance(result, str)
        assert len(result) > 0

def test_get_recipe_recommendations_api_error():

    with patch('requests.post', side_effect=requests.RequestException("API Error")):
        result = get_recipe_recommendations(['chicken', 'rice'])
        assert 'Error generating recipes' in result

def test_get_recipe_recommendations_input_sanitization():

    with patch('requests.post') as mock_post:
        mock_response = mock_post.return_value
        mock_response.json.return_value = {
            'response': 'Creative recipe using ingredients'
        }
        mock_response.raise_for_status.return_value = None
        
        # Test with spaces and mixed case
        result = get_recipe_recommendations([' Chicken ', ' TOMATOES', 'Pasta '])
        assert isinstance(result, str)
        assert len(result) > 0

def test_get_recipe_recommendations_special_characters():

    with patch('requests.post') as mock_post:
        mock_response = mock_post.return_value
        mock_response.json.return_value = {
            'response': 'Recipe with special ingredients'
        }
        mock_response.raise_for_status.return_value = None
        
        result = get_recipe_recommendations(['chicken!', 'tomato@', 'pasta#'])
        assert isinstance(result, str)
        assert len(result) > 0

# Pytest configuration
if __name__ == '__main__':
    pytest.main([__file__])
